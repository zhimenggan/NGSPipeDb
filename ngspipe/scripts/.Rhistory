install.packages('devtools')
install.packages(c("usethis","covr","httr"))
install.packages(c("httr"))
library("devtools")
install.packages(c("httr"))
install.packages(c("openssl"))
Sys.getenv("LD_LIBRARY_PATH")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("openssl")
BiocManager::install("clusterProfiler")
install.packages("BiocParallel")
install.packages("fgsea")
BiocManager::install("BioParallel")
BiocManager::install("BiocParallel")
BiocManager::install("BiocParallel")
install.packages("openssl")
install.packages("openssl")
install.packages("openssl")
BiocManager::install("BiocParallel")
Sys.getenv("LD_LIBRARY_PATH")
version
Sys.setenv(CONDA_BUILD_SYSROOT="/")
version
Sys.getenv("LD_LIBRARY_PATH")
BiocManager::install("BiocParallel")
BiocManager::install("BiocParallel")
install.packages("httpuv")
BiocManager::install("websocket")
install.packages('websocket')
remotes::install_github('rstudio/websocket')
remotes::install_github('pagedown')
remotes::install_github('rstudio/pagedown')
library(glue)
library(tidyverse)
install.packages('websocket')
withr::with_makevars(c(PKG_LIBS = "-liconv"), install.packages("haven"), assignment = "+=")
withr::with_makevars(c(PKG_LIBS = "-liconv"), install.packages("haven"), assignment = "+=")
install.packages('websocket')
install.packages('tidyverse')
install.packages('pagedown')
install.packages("~/Downloads/pagedown_0.5.tgz", repos = NULL, type = .Platform$pkgType)
library('pagedown')
library('websocket')
install.packages("~/Downloads/websocket_1.1.0.tgz", repos = NULL, type = .Platform$pkgType)
library('websocket')
Sys.getenv()
Sys.getenv()
Sys.setenv(all_proxy="socks5://127.0.0.1:1086")
setwd("~/Documents/NGSPipeDb/ngspipe/scripts")
library(DESeq2)
library(ggplot2)
chooseCRANmirror()
?library
?install.packages
command = matrix(c(
'help', 'h', 0,'loical', '帮助文档',
'countsMatrix', 'm', 1, 'character', 'expression must be counts',
'conditionFile', 'c', 1, 'character', 'sample group information'), byrow=TRUE, ncol=5)
args = getopt(command)
library('getopt', character.only = TRUE)
command = matrix(c(
'help', 'h', 0,'loical', '帮助文档',
'countsMatrix', 'm', 1, 'character', 'expression must be counts',
'conditionFile', 'c', 1, 'character', 'sample group information'), byrow=TRUE, ncol=5)
args = getopt(command)
args
?paste
?paste
class(args)
print(args)
args$countsMatrix="results/result/quantify/quantify_by_stringtie/gene.csv"
cts <- read.csv(args$countsMatrix, sep=",", row.names="Geneid")
args$countsMatrix="../../results/result/quantify/quantify_by_stringtie/gene.csv"
cts <- read.csv(args$countsMatrix, sep=",", row.names="Geneid")
args$countsMatrix="/Users/zhangxuan/Work/Current_work2020-6-21/databasetool/mouse_transcriptome_analysis/results/result/quantify/quantify_by_stringtie/gene.csv"
cts <- read.csv(args$countsMatrix, sep=",", row.names="Geneid")
cts <- read.csv(args$countsMatrix, sep=",", row.names="gene_id")
View(cts)
colnames(cts) <- sub("\\.", "-", colnames(cts))
View(cts)
countData <- as.matrix(cts)
rownames(countData) <- rownames(cts)
coldata <- read.csv(args$conditionFile, row.names=1,sep=",")
args$conditionFile="/Users/zhangxuan/Work/Current_work2020-6-21/databasetool/mouse_transcriptome_analysis/testdata/condition.xls"
coldata <- read.csv(args$conditionFile, row.names=1,sep=",")
coldata <- read.csv(args$conditionFile, row.names=1,sep=",")
View(coldata)
coldata <- coldata[,c("condition","type")]
coldata <- coldata[,c("Sample","Tissue")]
View(coldata)
all(rownames(coldata) %in% colnames(countData))
all(rownames(coldata) == colnames(countData))
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = coldata,
design = ~ condition)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = coldata,
design = ~ Sample)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
args$resultDir = "/Users/zhangxuan/Work/Current_work2020-6-21/databasetool/mouse_transcriptome_analysis/results/result/diff_samples"
sample_comb <- combn(unique(coldata$condition),2)
sample_comb <- combn(unique(coldata$Sample),2)
sample_comb
for (i in 1:dim(sample_comb)[2]){
sample1 <- as.character(sample_comb[, i][1])
sample2 <- as.character(sample_comb[, i][2])
res <- results(dds, contrast=c("Sample",sample1,sample2))
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
resSig_all_sorted <- resSig_all[ order(abs(resSig_all$log2FoldChange), decreasing = TRUE), ]
write.csv(resSig_all_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"_all.csv", sep=''))
resSig_up <- subset(res, padj < 0.05 & log2FoldChange > 1)
resSig_up_sorted <- resSig_up[ order(resSig_up$log2FoldChange, decreasing = TRUE), ]
write.csv(resSig_up_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"up.csv", sep=''))
resSig_down <- subset(res, padj < 0.05 & log2FoldChange < 1)
resSig_down_sorted <- resSig_down[ order(resSig_down$log2FoldChange), ]
write.csv(resSig_down_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"down.csv", sep=''))
# 火山图,在进行MA绘图之前，我们使用 lfcShrink函数缩小log2倍变化
res.shrink <- lfcShrink(dds, contrast=c("condition",sample1,sample2), res=res)
filename = paste(args$resultDir,sample1,"_vs_",sample2,".pdf", sep='')
cat(paste(sample1,"_vs_",sample2, sep=''))
pdf(file=filename)
plt <- plotMA(res.shrink, ylim = c(-5, 5))
print(plt)
dev.off()
}
for (i in 1:dim(sample_comb)[2]){
sample1 <- as.character(sample_comb[, i][1])
sample2 <- as.character(sample_comb[, i][2])
res <- results(dds, contrast=c("Sample",sample1,sample2))
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
resSig_all_sorted <- resSig_all[ order(abs(resSig_all$log2FoldChange), decreasing = TRUE), ]
write.csv(resSig_all_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"_all.csv", sep=''))
resSig_up <- subset(res, padj < 0.05 & log2FoldChange > 1)
resSig_up_sorted <- resSig_up[ order(resSig_up$log2FoldChange, decreasing = TRUE), ]
write.csv(resSig_up_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"up.csv", sep=''))
resSig_down <- subset(res, padj < 0.05 & log2FoldChange < 1)
resSig_down_sorted <- resSig_down[ order(resSig_down$log2FoldChange), ]
write.csv(resSig_down_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"down.csv", sep=''))
}
paste(args$resultDir,'/',sep="")
paste(args$resultDir,'/',sep="")
args$resultDir = paste(args$resultDir,'/',sep="")
sample_comb <- combn(unique(coldata$Sample),2)
for (i in 1:dim(sample_comb)[2]){
sample1 <- as.character(sample_comb[, i][1])
sample2 <- as.character(sample_comb[, i][2])
res <- results(dds, contrast=c("Sample",sample1,sample2))
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
resSig_all_sorted <- resSig_all[ order(abs(resSig_all$log2FoldChange), decreasing = TRUE), ]
write.csv(resSig_all_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"_all.csv", sep=''))
resSig_up <- subset(res, padj < 0.05 & log2FoldChange > 1)
resSig_up_sorted <- resSig_up[ order(resSig_up$log2FoldChange, decreasing = TRUE), ]
write.csv(resSig_up_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"up.csv", sep=''))
resSig_down <- subset(res, padj < 0.05 & log2FoldChange < 1)
resSig_down_sorted <- resSig_down[ order(resSig_down$log2FoldChange), ]
write.csv(resSig_down_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,"down.csv", sep=''))
}
for (i in 1:dim(sample_comb)[2]){
sample1 <- as.character(sample_comb[, i][1])
sample2 <- as.character(sample_comb[, i][2])
res <- results(dds, contrast=c("Sample",sample1,sample2))
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
resSig_all_sorted <- resSig_all[ order(abs(resSig_all$log2FoldChange), decreasing = TRUE), ]
write.csv(resSig_all_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,".all.csv", sep=''))
resSig_up <- subset(res, padj < 0.05 & log2FoldChange > 1)
resSig_up_sorted <- resSig_up[ order(resSig_up$log2FoldChange, decreasing = TRUE), ]
write.csv(resSig_up_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,".up.csv", sep=''))
resSig_down <- subset(res, padj < 0.05 & log2FoldChange < 1)
resSig_down_sorted <- resSig_down[ order(resSig_down$log2FoldChange), ]
write.csv(resSig_down_sorted,file= paste(args$resultDir,sample1,"_vs_",sample2,".down.csv", sep=''))
}
for (i in 1:dim(sample_comb)[2]){
sample1 <- as.character(sample_comb[, i][1])
sample2 <- as.character(sample_comb[, i][2])
cat(sample1, "vs", sample2, ";")
res <- results(dds, contrast=c("Sample",sample2,sample1))
# foldchange = log2(sample1 / sample2)
# 要把表达量添加进去
# https://blog.csdn.net/qazplm12_3/article/details/81221329?utm_source=blogxgwz1
# 把表达量添加到结果中
# 获得第一组数据均值
base1 <- counts(dds, normalized=TRUE)[, colData(dds)$Sample == sample1]
if (is.vector(base1)){
baseMean1 <- as.data.frame(base1)
} else {
baseMean1 <- as.data.frame(rowMeans(base1)) # rowMedians
}
colnames(baseMean1) <- sample1
#head(baseMean1)
# 获得第二组数据均值
base2 <- counts(dds, normalized=TRUE)[, colData(dds)$Sample == sample2]
if (is.vector(base2)){
baseMean2 <- as.data.frame(base2)
} else {
baseMean2 <- as.data.frame(rowMeans(base2)) # rowMedians
}
colnames(baseMean2) <- sample2
#head(baseMean2)
# 结果组合
res <- cbind(baseMean1, baseMean2, as.data.frame(res))
head(res)
# 增加ID信息
res <- cbind(ID=rownames(res), as.data.frame(res))
res$baseMean <- rowMeans(cbind(base1, base2))
# 校正后p-value为NA的复制为1
res$padj[is.na(res$padj)] <- 1
# 按pvalue排序, 把差异大的基因放前面
res <- res[order(res$pvalue),]
#head(res)
# the base mean is the mean of normalized counts of all samples, normalizing for sequencing depth.
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1, select=c('ID', sample1, sample2, 'log2FoldChange', 'padj'))
#resSig_all_sorted <- resSig_all[ order(abs(resSig_all$log2FoldChange), decreasing = TRUE), ]
write.csv(resSig_all, file= paste(args$resultDir,sample1,"_vs_",sample2,".all.csv", sep=''), quote=F)
cat("all:",dim(resSig_all)[1], ";")
resSig_up <- subset(res, padj < 0.05 & log2FoldChange > 1, select=c('ID', sample1, sample2, 'log2FoldChange', 'padj'))
#resSig_up_sorted <- resSig_up[ order(resSig_up$log2FoldChange, decreasing = TRUE), ]
write.csv(resSig_up, file= paste(args$resultDir,sample1,"_vs_",sample2,".up.csv", sep=''), quote=F)
cat("up:", dim(resSig_up)[1], ";")
resSig_down <- subset(res, padj < 0.05 & log2FoldChange < -1, select=c('ID', sample1, sample2, 'log2FoldChange', 'padj'))
#resSig_down_sorted <- resSig_down[ order(resSig_down$log2FoldChange), ]
write.csv(resSig_down, file= paste(args$resultDir, sample1,"_vs_",sample2,".down.csv", sep=''), quote=F)
cat("down:", dim(resSig_down)[1], '\n')
}
detail_sample_name = function (sample){
paste(sample, 'median', sep='_')
}
detail_sample_name("contoal")
for (i in 1:dim(sample_comb)[2]){
sample1 <- as.character(sample_comb[, i][1])
sample2 <- as.character(sample_comb[, i][2])
cat(sample1, "vs", sample2, ";")
res <- results(dds, contrast=c("Sample",sample2,sample1))
# foldchange = log2(sample1 / sample2)
# 要把表达量添加进去
# https://blog.csdn.net/qazplm12_3/article/details/81221329?utm_source=blogxgwz1
# 把表达量添加到结果中
# 获得第一组数据均值
base1 <- counts(dds, normalized=TRUE)[, colData(dds)$Sample == sample1]
if (is.vector(base1)){
baseMean1 <- as.data.frame(base1)
} else {
baseMean1 <- as.data.frame(rowMedians(base1)) # rowMedians or rowMeans
}
colnames(baseMean1) <- sample1
#head(baseMean1)
# 获得第二组数据均值
base2 <- counts(dds, normalized=TRUE)[, colData(dds)$Sample == sample2]
if (is.vector(base2)){
baseMean2 <- as.data.frame(base2)
} else {
baseMean2 <- as.data.frame(rowMedians(base2)) # rowMedians or rowMeans
}
colnames(baseMean2) <- sample2
#head(baseMean2)
# 结果组合
res <- cbind(baseMean1, baseMean2, as.data.frame(res))
head(res)
# 增加ID信息
res <- cbind(ID=rownames(res), as.data.frame(res))
res$baseMean <- rowMeans(cbind(base1, base2))
# 校正后p-value为NA的复制为1
res$padj[is.na(res$padj)] <- 1
# 按pvalue排序, 把差异大的基因放前面
res <- res[order(res$pvalue),]
#head(res)
# the base mean is the mean of normalized counts of all samples, normalizing for sequencing depth.
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1, select=c('ID', detail_sample_name(sample1), detail_sample_name(sample2), 'log2FoldChange', 'padj'))
#resSig_all_sorted <- resSig_all[ order(abs(resSig_all$log2FoldChange), decreasing = TRUE), ]
write.csv(resSig_all, file= paste(args$resultDir,sample1,"_vs_",sample2,".all.csv", sep=''), quote=F)
cat("all:",dim(resSig_all)[1], ";")
resSig_up <- subset(res, padj < 0.05 & log2FoldChange > 1, select=c('ID', detail_sample_name(sample1), detail_sample_name(sample2), 'log2FoldChange', 'padj'))
#resSig_up_sorted <- resSig_up[ order(resSig_up$log2FoldChange, decreasing = TRUE), ]
write.csv(resSig_up, file= paste(args$resultDir,sample1,"_vs_",sample2,".up.csv", sep=''), quote=F)
cat("up:", dim(resSig_up)[1], ";")
resSig_down <- subset(res, padj < 0.05 & log2FoldChange < -1, select=c('ID', detail_sample_name(sample1), detail_sample_name(sample2), 'log2FoldChange', 'padj'))
#resSig_down_sorted <- resSig_down[ order(resSig_down$log2FoldChange), ]
write.csv(resSig_down, file= paste(args$resultDir, sample1,"_vs_",sample2,".down.csv", sep=''), quote=F)
cat("down:", dim(resSig_down)[1], '\n')
}
res <- results(dds, contrast=c("Sample",sample2,sample1))
base1 <- counts(dds, normalized=TRUE)[, colData(dds)$Sample == sample1]
if (is.vector(base1)){
baseMean1 <- as.data.frame(base1)
} else {
baseMean1 <- as.data.frame(rowMedians(base1)) # rowMedians or rowMeans
}
colnames(baseMean1) <- sample1
base2 <- counts(dds, normalized=TRUE)[, colData(dds)$Sample == sample2]
if (is.vector(base2)){
baseMean2 <- as.data.frame(base2)
} else {
baseMean2 <- as.data.frame(rowMedians(base2)) # rowMedians or rowMeans
}
colnames(baseMean2) <- sample2
res <- cbind(baseMean1, baseMean2, as.data.frame(res))
head(res)
res <- cbind(ID=rownames(res), as.data.frame(res))
res$baseMean <- rowMeans(cbind(base1, base2))
# 校正后p-value为NA的复制为1
res$padj[is.na(res$padj)] <- 1
# 按pvalue排序, 把差异大的基因放前面
res <- res[order(res$pvalue),]
#head(res)
head(res)
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1, select=c('ID', detail_sample_name(sample1), detail_sample_name(sample2), 'log2FoldChange', 'padj'))
#resSig_all_sorted <- resSig_all[ order(abs(resSig_all$log2FoldChange), decreasing = TRUE), ]
write.csv(resSig_all, file= paste(args$resultDir,sample1,"_vs_",sample2,".all.csv", sep=''), quote=F)
resSig_all <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1, select=c('ID', sample1, sample2, 'log2FoldChange', 'padj'))
head(resSig_all)
colnames(resSig_all)
colnames(resSig_all) = c('ID', detail_sample_name(sample1), detail_sample_name(sample2), 'log2FoldChange', 'padj')
colnames(resSig_all)
head(resSig_all)
?write.csv
write.csv(resSig_all, file= paste(args$resultDir,sample1,"_vs_",sample2,".all.csv", sep=''), quote=F,col.names = FALSE)
write.table(resSig_all, file= paste(args$resultDir,sample1,"_vs_",sample2,".all.csv", sep=''), quote=F, col.names = FALSE, sep=',')
write.table(resSig_all, file= paste(args$resultDir,sample1,"_vs_",sample2,".all.csv", sep=''), quote=F, row.names = FALSE, sep=',')
