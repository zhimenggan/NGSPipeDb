import os
from os.path import join
import sys
import pandas as pd

# ----------------------------------------------------------------------- #
# sample information #
#
smpList = pd.read_csv(config["samplesList"], index_col=0, header=None)
SAMPLES = list(smpList.index)[0:]

# ----------------------------------------------------------------------- #

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------- #
# detail parameters in pipe #
#
# 1. sampling data
# for test the pipe, you can choose to the part of the input file, can be whole,head:40000,tail:40000,random:0.5,random:40000
sampling_method = 'tail' # tail, seqkit_number, seqkit_proportion, head, tail
sampling_data_outdir = join(config["resultsDir"], "sampling_data", "sampling_data_by_{}".format(sampling_method))

# 2. raw reads qc
qc_method = 'trim-galore' # trimomatic
qc_outdir = join(config["resultsDir"], "rawReads_qc", "rawReads_qc_by_{}".format(qc_method))

# 3. junction alignmnet
junction_align_method = 'hisat2' # star
junction_align_outdir = join(config["resultsDir"], "junction_align", "junction_align_by_{}".format(junction_align_method))
genome_index_prefix = "genome"
rna_library = "" # "--rna-strandness RF"(fr-firststrand) or "--rna-strandness FR"(fr-secondstrand)

# 4. transcript assembly
transcript_assembly_method = 'stringtie' # star
transcript_assembly_outdir = join(config["resultsDir"], "transcript_assembly", "transcript_assembly_by_{}".format(transcript_assembly_method))

# 5. quantification
quantify_method = 'stringtie' # htseqcounts or featurecounts
quantify_outdir = join(config["resultsDir"], "quantify", "quantify_by_{}".format(quantify_method))

# 6. statistic
statistic_data_all = [
                  '0.genomeFa', 
                  '0.genomeAnno', 
                  '1.rawReads', 
                  '2.cleanReads', 
                  '2.multiqc', 
                  '3.bam', 
                  '4.mergedGtf', 
                  '5.exp',
                  ]
genomeFa_outdir, genomeAnno_outdir, rawReads_outdir, cleanReads_outdir, multiqc_outdir, bam_outdir, mergedGtf_outdir, exp_outdir \
  = [join(config["resultsDir"], "statistic", "statistic_data_of_{}".format(i)) for i in statistic_data_all]

statistic_data_choose = [
                  #'0.genomeFa', 
                  #'0.genomeAnno', 
                  '1.rawReads', 
                  #'2.cleanReads', 
                  #'2.multiqc', 
                  '3.bam', 
                  #'4.mergedGtf', 
                  #'5.exp',
                  ]
stat_outdir = join(config["resultsDir"], "statistic")

# 7. generate report

# 8. database create

# -------------------------------------------------------------------------------------------------------------------------------------------------------------------- #

# ------------------------------
#report: "report/workflow.rst"
report_outdir = join(config["reportsDir"], "report.html")
# ------------------------------

rule all:
    input:
        #
        # 1. sampling data #
        sampling_data_result                = expand(join(sampling_data_outdir, "{sample}"+config["read1Suffix"]), sample=SAMPLES),
        #
        # 2. raw reads qc #
        rawReads_qc_result                 = expand(join(qc_outdir, "{sample}", "{sample}.cleanR1.fq.gz"), sample=SAMPLES),
        #
        # 3. juntion alignment #
        junction_align_result              = expand(join(junction_align_outdir, "{sample}", "{sample}.sorted.bam"), sample=SAMPLES),
        #
        # 4. transcript_assembly #
        transcript_assembly                = join(transcript_assembly_outdir, "merged.gtf"),
        #
        # 5. qunatification #
        quantify                           = join(quantify_outdir, "gene.csv"),
        #
        # 6. statistic #
        statistic_result                   = expand(join(stat_outdir, "statistic_data_of_{statistic_data}", 'statistic.completed'), statistic_data=statistic_data_choose),
        #
        # 7. report #
        #report_result                      = report_outdir,
        report_result    = [join(config['reportsDir'], 'report', i) for i in ["fig2.png", "test.csv"]],
        #
        # 8. database create #
        #sqlite3_result                     = join(),
        

onsuccess:
    print("""
    Workflow finished, no error
                ............                zhangxuan@T640P 
         .';;;;;.       .,;,.            --------------- 
      .,;;;;;;;.       ';;;;;;;.         OS: Deepin 20 x86_64 
    .;::::::::'     .,::;;,''''',.       Host: PowerEdge T640 
   ,'.::::::::    .;;'.          ';      Kernel: 5.4.50-amd64-desktop 
  ;'  'cccccc,   ,' :: '..        .:     Uptime: 1 hour, 47 mins 
 ,,    :ccccc.  ;: .c, '' :.       ,;    Packages: 2097 (dpkg) 
.l.     cllll' ., .lc  :; .l'       l.   Shell: bash 5.0.3 
.c       :lllc  ;cl:  .l' .ll.      :'   Resolution: 1920x1058 
.l        'looc. .   ,o:  'oo'      c,   WM: _NET_SUPPORTING_WM_CHECK: window id # 0x400001 
.o.         .:ool::coc'  .ooo'      o.   Icons: bloom [GTK2/3] 
 ::            .....   .;dddo      ;c    Terminal: /dev/pts/0 
  l:...            .';lddddo.     ,o     CPU: Intel Xeon Gold 5218R (80) @ 803MHz 
   lxxxxxdoolllodxxxxxxxxxc      :l      GPU: NVIDIA Quadro P620 
    ,dxxxxxxxxxxxxxxxxxxl.     'o,       Memory: 2601MiB / 128539MiB 
      ,dkkkkkkkkkkkkko;.    .;o;
        .;okkkkkdl;.    .,cl:.                                   
            .,:cccccccc:,.

    """)
    #shell("python NGSPipeCode/script/sendmail.py")
    # NGSPipeDB_source_code/.snakemake/log/
    
    

onerror:
    print("An error occurred")
    #shell("mail -s 'an error occurred' 296373256@qq.com ")

include: join("modules", "1.sampling_data_by_{}.Snakefile.py".format(sampling_method))
include: join("modules", "2.rawReads_qc_by_{}.Snakefile.py".format(qc_method))
include: join("modules", "3.junction_align_by_{}.Snakefile.py".format(junction_align_method))
include: join("modules", "4.transcript_assembly_by_{}.Snakefile.py".format(transcript_assembly_method))
include: join("modules", "5.quant_by_{}.Snakefile.py".format(quantify_method))
include: join("modules", "6.statistic_data_of_bam.Snakefile.py")
include: join("modules", "6.statistic_data_of_rawReads.Snakefile.py")
include: join("modules", "7.report.Snakefile.py")
